[{"/Users/codeep/WebstormProjects/Chat App/public/src/index.js":"1","/Users/codeep/WebstormProjects/Chat App/public/src/App.js":"2","/Users/codeep/WebstormProjects/Chat App/public/src/pages/Register.jsx":"3","/Users/codeep/WebstormProjects/Chat App/public/src/pages/Login.jsx":"4","/Users/codeep/WebstormProjects/Chat App/public/src/pages/Chat.jsx":"5","/Users/codeep/WebstormProjects/Chat App/public/src/utils/APIRoutes.js":"6","/Users/codeep/WebstormProjects/Chat App/public/src/pages/SetAvatar.jsx":"7","/Users/codeep/WebstormProjects/Chat App/public/src/components/Contacts.jsx":"8","/Users/codeep/WebstormProjects/Chat App/public/src/components/Welcome.jsx":"9","/Users/codeep/WebstormProjects/Chat App/public/src/components/ChatContainer.jsx":"10","/Users/codeep/WebstormProjects/Chat App/public/src/components/Logout.jsx":"11","/Users/codeep/WebstormProjects/Chat App/public/src/components/ChatInput.jsx":"12","/Users/codeep/WebstormProjects/Chat App/public/src/components/Messages.jsx":"13"},{"size":254,"mtime":1660044924107,"results":"14","hashOfConfig":"15"},{"size":555,"mtime":1660224632561,"results":"16","hashOfConfig":"15"},{"size":5066,"mtime":1660559374339,"results":"17","hashOfConfig":"15"},{"size":4332,"mtime":1660559438616,"results":"18","hashOfConfig":"15"},{"size":2946,"mtime":1661242851503,"results":"19","hashOfConfig":"15"},{"size":403,"mtime":1660652617668,"results":"20","hashOfConfig":"15"},{"size":7011,"mtime":1661169900202,"results":"21","hashOfConfig":"15"},{"size":4953,"mtime":1661175424759,"results":"22","hashOfConfig":"15"},{"size":638,"mtime":1660562802354,"results":"23","hashOfConfig":"15"},{"size":4971,"mtime":1661170153529,"results":"24","hashOfConfig":"15"},{"size":713,"mtime":1660564954432,"results":"25","hashOfConfig":"15"},{"size":3579,"mtime":1660643614641,"results":"26","hashOfConfig":"15"},{"size":172,"mtime":1660568390673,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"33vvet",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},"/Users/codeep/WebstormProjects/Chat App/public/src/index.js",[],[],[],"/Users/codeep/WebstormProjects/Chat App/public/src/App.js",[],[],"/Users/codeep/WebstormProjects/Chat App/public/src/pages/Register.jsx",["74"],[],"import React, {useEffect, useState} from 'react';\nimport styled from \"styled-components\"\nimport {Link, useNavigate} from \"react-router-dom\";\nimport Logo from \"../assets/logo.svg\"\nimport {ToastContainer, toast} from \"react-toastify\"\nimport \"react-toastify/dist/ReactToastify.css\"\nimport axios from \"axios\";\nimport {registerRoute} from \"../utils/APIRoutes\";\n\nfunction Register(props) {\n    const navigate = useNavigate();\n    const [values, setValues] = useState({\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    })\n\n    const toastOptions = {\n        position: \"bottom-right\",\n        autoClose: 8000,\n        pauseOnHover: true,\n        draggable: true,\n        theme: \"dark\"\n    }\n    useEffect(()=> {\n        if(localStorage.getItem('chat-app-user')){\n            navigate('/')\n        }\n    },[])\n\n    const handleValidation = () => {\n        const {password, confirmPassword, username, email} = values;\n        if(password !== confirmPassword) {\n            toast.error(\"password and confirm password should be same\",\n                toastOptions);\n            return false// toastify allows to send notifications\n        } else if (username.length < 3) {\n            toast.error(\"Username should be greater than 3 characters\",\n                toastOptions);\n            return false\n        } else if (password.length < 8) {\n            toast.error(\"Password should be minimum 8 characters\",\n                toastOptions);\n            return false\n        } else if (email === \"\") {\n            toast.error(\"Email is required.\", toastOptions);\n            return false;\n        }\n\n        return true;\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        if (handleValidation()) {\n            console.log(\"in validation\", registerRoute)\n            const {password, username, email} = values;\n            const {data} = await axios.post(registerRoute, {\n                username,\n                email,\n                password\n            });\n            if(data.status === false) {\n                toast.error(data.msg, toastOptions);\n            }\n            if(data.status === true) {\n                localStorage.setItem(\"chat-app-user\", JSON.stringify(data.user));\n                navigate(\"/\");\n            }\n        };\n    }\n\n\n    const handleChange = (event) => {\n        setValues({...values,[event.target.name]: event.target.value})\n    };\n\n    return (\n        <>\n        <FormContainer>\n            <form onSubmit={(event) => handleSubmit(event)}>\n                <div className=\"brand\">\n                    <img src={Logo} alt=\"Logo\"/>\n                    <h1>snappy</h1>\n                </div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Username\"\n                    name=\"username\"\n                    onChange={e => handleChange(e)}\n                />\n                <input\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    name=\"email\"\n                    onChange={e => handleChange(e)}\n                />\n                <input\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    onChange={e => handleChange(e)}\n                />\n                <input\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                    name=\"confirmPassword\"\n                    onChange={e => handleChange(e)}\n                />\n                <button type=\"submit\">Create User</button>\n                <span>Already have an account ? <Link to=\"/login\">Login</Link> </span>\n            </form>\n        </FormContainer>\n        <ToastContainer />\n        </>\n    );\n}\n\nconst FormContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 1rem;\n  align-items: center;\n  background-color: #131324;\n  .brand {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    justify-content: center;\n    img{\n      height: 5rem;\n    }\n    h1 {\n      color: white;\n      text-transform: uppercase;\n    }\n  }\n  form {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    background-color: #00000076;\n    border-radius: 2rem;\n    padding: 3rem 5rem;\n  }\n  input{\n    background-color: transparent;\n    padding: 1rem;\n    border: 0.1rem solid #4e0eff;\n    border-radius: 0.4rem;\n    color: white;\n    width: 100%;\n    font-size: 1rem;\n    &:focus {\n      border: 0.1rem solid #997af0;\n      outline: none;\n    }\n  }\n  button {\n    background-color: #997af0;\n    color: white;\n    padding: 1rem 2rem;\n    border: none;\n    font-weight: bold;\n    cursor: pointer;\n    border-radius: 0.4rem;\n    font-size: 1rem;\n    text-transform: uppercase;\n    &:hover {\n      background-color: #4e0eff;\n    }\n  }\n  span{\n    color: white;\n    text-transform: uppercase;\n    a{\n      color: #4e0eff;\n      text-decoration: none;\n      font-weight: bold;\n    }\n  }\n`;\n\nexport default Register;\n","/Users/codeep/WebstormProjects/Chat App/public/src/pages/Login.jsx",["75","76"],[],"import React, {useEffect, useState} from 'react';\nimport styled from \"styled-components\"\nimport {Link, useNavigate} from \"react-router-dom\";\nimport Logo from \"../assets/logo.svg\"\nimport {ToastContainer, toast} from \"react-toastify\"\nimport \"react-toastify/dist/ReactToastify.css\"\nimport axios from \"axios\";\nimport {loginRoute} from \"../utils/APIRoutes\";\n\nfunction Login(props) {\n    const navigate = useNavigate();\n    const [values, setValues] = useState({\n        username: \"\",\n        password: \"\",\n    })\n\n    const toastOptions = {\n        position: \"bottom-right\",\n        autoClose: 8000,\n        pauseOnHover: true,\n        draggable: true,\n        theme: \"dark\"\n    }\n     useEffect(()=> {\n         if(localStorage.getItem('chat-app-user')){\n             navigate('/')\n         }\n     },[])\n\n    const handleValidation = () => {\n        const {password, username} = values;\n        if(password === \"\") {\n            toast.error(\"Email and Password are required\",\n                toastOptions);\n            return false// toastify allows to send notifications\n        } else if (username === \"\") {\n            toast.error(\"Email and Password are required\",\n                toastOptions);\n            return false\n        }\n\n        return true;\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        if (handleValidation()) {\n            console.log(\"in validation\", loginRoute)\n            const {password, username, email} = values;\n            const {data} = await axios.post(loginRoute, {\n                username,\n                password\n            });\n            if(data.status === false) {\n                toast.error(data.msg, toastOptions);\n            }\n            if(data.status === true) {\n                localStorage.setItem(\"chat-app-user\", JSON.stringify(data.user));\n                navigate(\"/\");\n            }\n        };\n    }\n\n\n    const handleChange = (event) => {\n        setValues({...values,[event.target.name]: event.target.value})\n    };\n\n    return (\n        <>\n            <FormContainer>\n                <form onSubmit={(event) => handleSubmit(event)}>\n                    <div className=\"brand\">\n                        <img src={Logo} alt=\"Logo\"/>\n                        <h1>snappy</h1>\n                    </div>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Username\"\n                        name=\"username\"\n                        onChange={e => handleChange(e)}\n                        min = \"3\"\n                    />\n                    <input\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        name=\"password\"\n                        onChange={e => handleChange(e)}\n                    />\n                    <button type=\"submit\">Login</button>\n                    <span>Don't have an account ? <Link to=\"/register\">Register</Link> </span>\n                </form>\n            </FormContainer>\n            <ToastContainer />\n        </>\n    );\n}\n\nconst FormContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 1rem;\n  align-items: center;\n  background-color: #131324;\n  .brand {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    justify-content: center;\n    img{\n      height: 5rem;\n    }\n    h1 {\n      color: white;\n      text-transform: uppercase;\n    }\n  }\n  form {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    background-color: #00000076;\n    border-radius: 2rem;\n    padding: 3rem 5rem;\n  }\n  input{\n    background-color: transparent;\n    padding: 1rem;\n    border: 0.1rem solid #4e0eff;\n    border-radius: 0.4rem;\n    color: white;\n    width: 100%;\n    font-size: 1rem;\n    &:focus {\n      border: 0.1rem solid #997af0;\n      outline: none;\n    }\n  }\n  button {\n    background-color: #997af0;\n    color: white;\n    padding: 1rem 2rem;\n    border: none;\n    font-weight: bold;\n    cursor: pointer;\n    border-radius: 0.4rem;\n    font-size: 1rem;\n    text-transform: uppercase;\n    &:hover {\n      background-color: #4e0eff;\n    }\n  }\n  span{\n    color: white;\n    text-transform: uppercase;\n    a{\n      color: #4e0eff;\n      text-decoration: none;\n      font-weight: bold;\n    }\n  }\n`;\n\nexport default Login;\n","/Users/codeep/WebstormProjects/Chat App/public/src/pages/Chat.jsx",["77","78"],[],"/Users/codeep/WebstormProjects/Chat App/public/src/utils/APIRoutes.js",[],[],"/Users/codeep/WebstormProjects/Chat App/public/src/pages/SetAvatar.jsx",["79","80"],[],"/Users/codeep/WebstormProjects/Chat App/public/src/components/Contacts.jsx",["81","82","83"],[],"/Users/codeep/WebstormProjects/Chat App/public/src/components/Welcome.jsx",[],[],"/Users/codeep/WebstormProjects/Chat App/public/src/components/ChatContainer.jsx",["84","85"],[],"import React, {useEffect, useRef, useState} from 'react';\nimport styled from \"styled-components\";\nimport Logout from \"./Logout\";\nimport ChatInput from \"./ChatInput\";\nimport axios from 'axios'\nimport {getAllMessagesRoute, sendMessageRoute} from \"../utils/APIRoutes\";\nimport {v4 as uuidv4} from 'uuid';\n\nfunction ChatContainer({currentChat, currentUser, socket}) {\n\n    const [messages, setMessages] = useState([]);\n    const [arrivalMessage, setArrivalMessage] = useState(null);\n    const scrollRef = useRef()\n    useEffect(() => {(async () => {\n        if(currentChat){\n            const response = await axios.post(getAllMessagesRoute, {\n                from: currentUser._id,\n                to: currentChat._id,\n            })\n            setMessages(response.data)\n        }\n    })()\n    }, [currentChat])\n\n    const handleSendMsg = async (msg) => {\n        await axios.post(sendMessageRoute,{\n            from: currentUser._id,\n            to: currentChat._id,\n            message: msg,\n        });\n        socket.current.emit(\"send-msg\",{\n            to: currentChat._id,\n            from: currentUser._id,\n            message: msg,\n        })\n\n        const msgs = [...messages];\n        msgs.push({fromSelf: true, message: msg});\n        setMessages(msgs)\n    };\n\n    useEffect(()=>{\n        if(socket.current) {\n            socket.current.on(\"msg-receive\", (msg)=> {\n                setArrivalMessage({fromSelf: false,message:msg });\n            });\n        }\n    },[]);\n\n    useEffect(()=> {\n        arrivalMessage && setMessages((prev) => [...prev, arrivalMessage])\n    }, [arrivalMessage]);\n\n\n    useEffect(()=>{\n        scrollRef.current?.scrollIntoView({behavior: \"smooth\"})\n    }, [messages])\n\n    return (\n        <>\n            {currentChat && (\n                <Container>\n                    <div className=\"chat-header\">\n                        <div className=\"user-details\">\n                            <div className='avatar'>\n                                <img\n                                    src={currentChat.avatarImage.length>100 ? `data:image/svg+xml;base64,${currentChat.avatarImage}`:`http://localhost:4000/${currentChat.avatarImage}`}\n                                    alt=\"avatar\"\n                                />\n                            </div>\n                            <div className=\"username\">\n                                <h3>{currentChat.username}</h3>\n                            </div>\n                        </div>\n                        <Logout />\n                    </div>\n                    <div className='chat-messages'>\n                        {messages.map((message) => {\n                                return (\n                                    <div ref={scrollRef} key={uuidv4()}>\n                                        <div className={`message ${\n                                            message.fromSelf ? \"sended\" : \"received\"\n                                        }`}>\n                                            <div className='content'>\n                                                <p>{message.message}</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                    </div>\n                    <ChatInput handleSendMsg = {handleSendMsg}/>\n                </Container>\n            )}\n        </>\n        )\n}\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-rows: 10% 80% 10%;\n  gap: 0.1rem;\n  overflow: hidden;\n  @media screen and (min-width: 720px) and (max-width: 1080px) {\n    grid-template-rows: 15% 70% 15%;\n  }\n  .chat-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 2rem;\n    .user-details {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      .avatar {\n        img {\n          height: 3rem;\n        }\n      }\n      .username {\n        h3 {\n          color: white;\n        }\n      }\n    }\n  }\n  .chat-messages {\n    padding: 1rem 2rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    overflow: auto;\n    &::-webkit-scrollbar {\n      width: 0.2rem;\n      &-thumb {\n        background-color: #ffffff39;\n        width: 0.1rem;\n        border-radius: 1rem;\n      }\n    }\n    .message {\n      display: flex;\n      align-items: center;\n      .content {\n        max-width: 40%;\n        overflow-wrap: break-word;\n        padding: 1rem;\n        font-size: 1.1rem;\n        border-radius: 1rem;\n        color: #d1d1d1;\n        @media screen and (min-width: 720px) and (max-width: 1080px) {\n          max-width: 70%;\n        }\n      }\n    }\n    .sended {\n      justify-content: flex-end;\n      .content {\n        background-color: #4f04ff21;\n      }\n    }\n    .received {\n      justify-content: flex-start;\n      .content {\n        background-color: #9900ff20;\n      }\n    }\n  }`\n\nexport default ChatContainer;\n",[],"/Users/codeep/WebstormProjects/Chat App/public/src/components/Logout.jsx",[],[],"/Users/codeep/WebstormProjects/Chat App/public/src/components/ChatInput.jsx",[],[],"/Users/codeep/WebstormProjects/Chat App/public/src/components/Messages.jsx",["86"],[],"import React from 'react';\nimport styled from \"styled-components\";\n\nfunction Messages(props) {\n    return (\n        <div>Messages</div>\n    );\n}\n\n\nexport default Messages;\n",[],{"ruleId":"87","severity":1,"message":"88","line":30,"column":7,"nodeType":"89","endLine":30,"endColumn":9,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"88","line":28,"column":8,"nodeType":"89","endLine":28,"endColumn":10,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":49,"column":40,"nodeType":"94","messageId":"95","endLine":49,"endColumn":45},{"ruleId":"87","severity":1,"message":"88","line":27,"column":7,"nodeType":"89","endLine":27,"endColumn":9,"suggestions":"96"},{"ruleId":"87","severity":1,"message":"88","line":46,"column":8,"nodeType":"89","endLine":46,"endColumn":21,"suggestions":"97"},{"ruleId":"87","severity":1,"message":"88","line":34,"column":7,"nodeType":"89","endLine":34,"endColumn":9,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":156,"column":38,"nodeType":"101","endLine":156,"endColumn":89},{"ruleId":"92","severity":1,"message":"102","line":9,"column":12,"nodeType":"94","messageId":"95","endLine":9,"endColumn":20},{"ruleId":"87","severity":1,"message":"103","line":16,"column":20,"nodeType":"104","endLine":16,"endColumn":61},{"ruleId":"92","severity":1,"message":"105","line":25,"column":19,"nodeType":"94","messageId":"95","endLine":25,"endColumn":23},{"ruleId":"87","severity":1,"message":"106","line":23,"column":8,"nodeType":"89","endLine":23,"endColumn":21,"suggestions":"107"},{"ruleId":"87","severity":1,"message":"108","line":48,"column":7,"nodeType":"89","endLine":48,"endColumn":9,"suggestions":"109"},{"ruleId":"92","severity":1,"message":"110","line":2,"column":8,"nodeType":"94","messageId":"95","endLine":2,"endColumn":14},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["111"],["112"],"no-unused-vars","'email' is assigned a value but never used.","Identifier","unusedVar",["113"],["114"],["115"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'isOnline' is assigned a value but never used.","Assignments to the 'interval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUser._id'. Either include it or remove the dependency array.",["116"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["117"],"'styled' is defined but never used.",{"desc":"118","fix":"119"},{"desc":"118","fix":"120"},{"desc":"118","fix":"121"},{"desc":"122","fix":"123"},{"desc":"118","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [navigate]",{"range":"129","text":"130"},{"range":"131","text":"130"},{"range":"132","text":"130"},"Update the dependencies array to be: [currentUser, navigate]",{"range":"133","text":"134"},{"range":"135","text":"130"},"Update the dependencies array to be: [currentChat, currentUser._id]",{"range":"136","text":"137"},"Update the dependencies array to be: [socket]",{"range":"138","text":"139"},[843,845],"[navigate]",[795,797],[1037,1039],[1658,1671],"[currentUser, navigate]",[1095,1097],[795,808],"[currentChat, currentUser._id]",[1475,1477],"[socket]"]